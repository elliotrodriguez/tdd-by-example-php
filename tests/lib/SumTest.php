<?php
namespace thedeveloperdad;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-01 at 20:32:39.
 */
class SumTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Sum
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers thedeveloperdad\Sum::plus
     * @todo   Implement testPlus().
     */
    public function testPlus()
    {
      $sum = new Sum(Money::dollar(4), Money::dollar(5));
        $pair = new Pair("USD", "CHF");
        
        $this->assertTrue($sum instanceof Expression);
        $this->assertFalse($pair instanceof Expression);
    }

    /**
     * @covers thedeveloperdad\Sum::reduce
     * @todo   Implement testReduce().
     */
    public function testReduce()
    {
       $sum = new Sum(Money::dollar(3), Money::dollar(4));
        $bank = new Bank();
        
        $result = $bank->reduce($sum, "USD");
       
        
        // to get the equality going we have to call the method we wrote
        // so it checks the type
        $this->assertTrue(Money::dollar(7)->equals($result));
    }
    
    public function testPlusReturnsSum() {
        $five = Money::dollar(5);
        
       $sum = $five->plus($five);
        
        
        // PHP does not support explicit user type object casting so the
        // example differs here, no cast exceptions to check
        $this->assertEquals($five, $sum->augend);
    }
    
    public function testSumPlusMoney() {
        $fiveDollars=  Money::dollar(5);
        $tenFrancs = Money::franc(10);
        $bank = new Bank();
        
        $bank->addRate("CHF", "USD", 2);
        $sum = (new Sum($fiveDollars, $tenFrancs))->plus($fiveDollars);
        
        $result = $bank->reduce($sum, "USD");
        
        $this->assertTrue(Money::dollar(15)->equals($result));
    }
    
    public function testSumTimes() {
        $fiveDollars = Money::dollar(5);
        $tenFrancs = Money::franc(10);
        
        $bank = new Bank();
        
        $bank->addRate("CHF", "USD", 2);
        
        $sumTimes = (new Sum($fiveDollars, $tenFrancs))->times(2);
        $result = $bank->reduce($sumTimes, "USD");
        
        $this->assertTrue(Money::dollar(20)->equals($result));
        
    }
    
    // THIS IS AN INTENTIONAL FAIL FOR THE END OF CHAPTER 16
    /*
    public function testPlusSameCurrencyReturnsMoney()
    {
        
        $sum = Money::dollar(1)->plus(Money::dollar(1));
        $this->assertTrue($sum instanceof Money);
    }
     * 
     */
}
