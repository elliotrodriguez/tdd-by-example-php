<?php

namespace thedeveloperdad;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-24 at 23:50:53.
 */
class FrancTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Franc
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //$this->object = new Franc(5);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers thedeveloperdad\Franc::times
     */
    public function testTimes() {
        $five = Money::franc(5);
        
        $this->assertEquals(new Money(10, "CHF"), $five->times(2));
        $this->assertEquals(new Money(15, "CHF"), $five->times(3));
     
    }

    /**
     * @covers thedeveloperdad\Franc::equals
     */
    public function testEquals() {
        $this->assertFalse(Money::franc(5)->equals(Money::dollar(5)));
                
    }

    public function testReduceMoneyDifferentCurrency()
    {
        $bank = new Bank();
        $bank->addRate("CHF", "USD", 2);
        $bank->addRate("USD", "CHF", 3);
        $result1 = $bank->reduce(Money::dollar(1), "USD");
        $result2 = $bank->reduce(Money::franc(3), "CHF");
        
        $this->assertTrue(Money::dollar(1)->equals($result1));
        $this->assertTrue(Money::franc(3)->equals($result2));
        $this->assertFalse(Money::dollar(1)->equals($result2));
    }
    
    public function testMixedAddition() 
    {
        $fiveDollars = Money::dollar(5);
        $tenFrancs = Money::franc(10);
        
        $bank = new Bank();
        $bank->addRate("CHF", "USD", 2);
        
        //added this for pg 75 check that the test passes if the type is Expression
        $this->assertTrue($fiveDollars instanceof Expression); 
        $this->assertTrue($tenFrancs instanceof Expression); 
        
        $result = $bank->reduce($fiveDollars->plus($tenFrancs), "USD");
        
       
        $this->assertTrue(Money::dollar(10)->equals($result));
    }
}
